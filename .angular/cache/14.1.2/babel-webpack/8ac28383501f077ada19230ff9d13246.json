{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ValidatorService = /*#__PURE__*/(() => {\n  class ValidatorService {\n    constructor(http) {\n      this.http = http; // string que contiene la arquitectura de una RegExp\n\n      this.nombreApellidoPattern = '([a-zA-Z]+) ([a-zA-Z]+)';\n      this.emailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\";\n      this.regex = new RegExp('[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$');\n    } //Validacion personalizada, recibe el valor de un campo y si no cumple las condiciones\n    //regresamos cualquier objeto con un valor true, esto le indica al ReactiveForms que el\n    //campo no es valido, si regresamos null el campo es valido\n\n\n    noPuedeSerStrider(control) {\n      var _a;\n\n      console.log(control.value);\n      const valor = (_a = control.value) === null || _a === void 0 ? void 0 : _a.trim().toLowerCase();\n\n      if (valor === 'strider') {\n        return {\n          noStrider: true\n        };\n      }\n\n      return null;\n      console.log(valor);\n    }\n\n    camposIguales(campo1, campo2) {\n      return formGroup => {\n        var _a, _b, _c, _d;\n\n        const pass1 = (_a = formGroup.get(campo1)) === null || _a === void 0 ? void 0 : _a.value;\n        const pass2 = (_b = formGroup.get(campo2)) === null || _b === void 0 ? void 0 : _b.value;\n\n        if (pass1 !== pass2) {\n          (_c = formGroup.get(campo2)) === null || _c === void 0 ? void 0 : _c.setErrors({\n            noIguales: true\n          });\n          return {\n            noIguales: true\n          };\n        }\n\n        (_d = formGroup.get(campo2)) === null || _d === void 0 ? void 0 : _d.setErrors(null);\n        return null;\n      };\n    }\n\n    validate(control) {\n      const email = control.value;\n      return this.http.get(`http://localhost:3000/usuarios?q=${email}`).pipe(delay(3000), map(resp => {\n        return resp.length === 0 ? null : {\n          emailTomado: true\n        };\n      }));\n    }\n\n  }\n\n  ValidatorService.ɵfac = function ValidatorService_Factory(t) {\n    return new (t || ValidatorService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ValidatorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidatorService,\n    factory: ValidatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return ValidatorService;\n})();","map":null,"metadata":{},"sourceType":"module"}