{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegistroComponent = class RegistroComponent {\n  constructor(fb, validator) {\n    this.fb = fb;\n    this.validator = validator; //AQUI TEMPORALMENTE\n\n    this.nombreApellidoPattern = '([a-zA-Z]+) ([a-zA-Z]+)';\n    this.emailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\";\n    this.regex = new RegExp('[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$');\n    this.miFormulario = this.fb.group({\n      //Validators.pattern() evalua el campo junto a una RegExp, se le puede pasar como ARG un string con esta\n      //arquitectura o una RegExp ya compilada\n      nombre: ['', [Validators.required, Validators.pattern(this.validator.nombreApellidoPattern)]],\n      email: ['', [Validators.required, Validators.pattern(this.validator.regex)]],\n      username: ['', [Validators.required, this.validator.noPuedeSerStrider]],\n      password: ['', [Validators.required, Validators.min(6)]],\n      confirmar: ['', [Validators.required, this.validator.camposIguales]]\n    }, {\n      validators: [this.validator.camposIguales('password1', 'confirmar')]\n    });\n  } //Validacion personalizada, recibe el valor de un campo y si no cumple las condiciones\n  //regresamos cualquier objeto con un valor true, esto le indica al ReactiveForms que el\n  //campo no es valido, si regresamos null el campo es valido\n\n\n  noPuedeSerStrider(control) {\n    var _a;\n\n    console.log(control.value);\n    const valor = (_a = control.value) === null || _a === void 0 ? void 0 : _a.trim().toLowerCase();\n\n    if (valor === 'strider') {\n      return {\n        noStrider: true\n      };\n    }\n\n    return null;\n    console.log(valor);\n  }\n\n  ngOnInit() {\n    this.miFormulario.reset({\n      nombre: 'Maurizio Olivastri',\n      email: 'mailexample@mail.com',\n      username: 'Molivastri24'\n    });\n  } //regresa el estado de la propiedad invalid y si fue tocado el campo\n\n\n  campoNoValido(campo) {\n    var _a, _b;\n\n    return ((_a = this.miFormulario.get(campo)) === null || _a === void 0 ? void 0 : _a.invalid) && ((_b = this.miFormulario.get(campo)) === null || _b === void 0 ? void 0 : _b.touched);\n  }\n\n  submitFormulario() {\n    console.log(this.miFormulario.value); //marca todos los campos como tocados para que aparezcan los errores\n\n    this.miFormulario.markAllAsTouched();\n  }\n\n  get emailErrorMsg() {\n    var _a;\n\n    const errors = (_a = this.miFormulario.get('email')) === null || _a === void 0 ? void 0 : _a.errors;\n\n    if (errors === null || errors === void 0 ? void 0 : errors.required) {\n      return 'Email es Obligatorio';\n    } else if (errors === null || errors === void 0 ? void 0 : errors.pattern) {\n      return 'El Email no es correcto';\n    } else if (errors === null || errors === void 0 ? void 0 : errors.emailTomado) {\n      //error que proviene del email-validator.service que valida si el email ya existe\n      return 'El email ya existe';\n    }\n\n    return '';\n  }\n\n};\nRegistroComponent = __decorate([Component({\n  selector: 'app-registro',\n  templateUrl: './registro.component.html',\n  styleUrls: ['./registro.component.css']\n})], RegistroComponent);\nexport { RegistroComponent };","map":null,"metadata":{},"sourceType":"module"}