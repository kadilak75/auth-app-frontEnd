{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet BasicosComponent = class BasicosComponent {\n  constructor(fb) {\n    this.fb = fb; // miFormulario: FormGroup = new FormGroup({\n    //   nombre: new FormControl('RTX 4080ti'),\n    //   precio: new FormControl(0),\n    //   existencias: new FormControl(0)\n    // })\n\n    this.miFormulario = this.fb.group({\n      nombre: ['', [Validators.required, Validators.minLength(3)]],\n      precio: [0, [Validators.required, Validators.min(0)]],\n      existencias: [0, [Validators.required, Validators.min(0)]]\n    });\n  } //esta validacion se le pasa a cada input en el que tengamos validaciones basicas, en este caso los \n  //tres campos tienen validaci√≥n en estos campos vamos a pedir un argumento que va a ser el \n  //formControlName=\"\" y este va a ser el control que se va a evaluar, de esta manera no tenemos\n  //que crear un metodo individual para cada input\n\n\n  campoNoValido(campo) {\n    return this.miFormulario.controls[campo].errors && this.miFormulario.controls[campo].touched;\n  }\n\n  guardar() {\n    if (this.miFormulario.invalid) {\n      this.miFormulario.touched;\n      return;\n    }\n\n    console.log(this.miFormulario.value);\n  }\n\n};\nBasicosComponent = __decorate([Component({\n  selector: 'app-basicos',\n  templateUrl: './basicos.component.html',\n  styles: []\n})], BasicosComponent);\nexport { BasicosComponent };","map":null,"metadata":{},"sourceType":"module"}