{"ast":null,"code":"var path = require('path'),\n    util = require('util'),\n    glob = require('glob'),\n    exit = require('./exit'),\n    CompletionReporter = require('./reporters/completion_reporter'),\n    ConsoleSpecFilter = require('./filters/console_spec_filter');\n\nmodule.exports = Jasmine;\nmodule.exports.ConsoleReporter = require('./reporters/console_reporter');\n\nfunction Jasmine(options) {\n  options = options || {};\n\n  var jasmineCore = options.jasmineCore || require('jasmine-core');\n\n  this.jasmineCorePath = path.join(jasmineCore.files.path, 'jasmine.js');\n  this.jasmine = jasmineCore.boot(jasmineCore);\n  this.projectBaseDir = options.projectBaseDir || path.resolve();\n  this.printDeprecation = options.printDeprecation || require('./printDeprecation');\n  this.specDir = '';\n  this.specFiles = [];\n  this.helperFiles = [];\n  this.env = this.jasmine.getEnv();\n  this.reportersCount = 0;\n  this.completionReporter = new CompletionReporter();\n  this.onCompleteCallbackAdded = false;\n  this.exit = exit;\n  this.showingColors = true;\n  this.reporter = new module.exports.ConsoleReporter();\n  this.addReporter(this.reporter);\n  this.defaultReporterConfigured = false;\n  var jasmineRunner = this;\n  this.completionReporter.onComplete(function (passed) {\n    jasmineRunner.exitCodeCompletion(passed);\n  });\n  this.checkExit = checkExit(this);\n\n  this.coreVersion = function () {\n    return jasmineCore.version();\n  };\n}\n\nJasmine.prototype.randomizeTests = function (value) {\n  this.env.randomizeTests(value);\n};\n\nJasmine.prototype.seed = function (value) {\n  this.env.seed(value);\n};\n\nJasmine.prototype.showColors = function (value) {\n  this.showingColors = value;\n};\n\nJasmine.prototype.addSpecFile = function (filePath) {\n  this.specFiles.push(filePath);\n};\n\nJasmine.prototype.addReporter = function (reporter) {\n  this.env.addReporter(reporter);\n  this.reportersCount++;\n};\n\nJasmine.prototype.clearReporters = function () {\n  this.env.clearReporters();\n  this.reportersCount = 0;\n};\n\nJasmine.prototype.provideFallbackReporter = function (reporter) {\n  this.env.provideFallbackReporter(reporter);\n};\n\nJasmine.prototype.configureDefaultReporter = function (options) {\n  options.timer = options.timer || new this.jasmine.Timer();\n\n  options.print = options.print || function () {\n    process.stdout.write(util.format.apply(this, arguments));\n  };\n\n  options.showColors = options.hasOwnProperty('showColors') ? options.showColors : true;\n  options.jasmineCorePath = options.jasmineCorePath || this.jasmineCorePath;\n\n  if (options.onComplete) {\n    this.printDeprecation('Passing in an onComplete function to configureDefaultReporter is deprecated.');\n  }\n\n  this.reporter.setOptions(options);\n  this.defaultReporterConfigured = true;\n};\n\nJasmine.prototype.addMatchers = function (matchers) {\n  this.jasmine.Expectation.addMatchers(matchers);\n};\n\nJasmine.prototype.loadSpecs = function () {\n  this.specFiles.forEach(function (file) {\n    require(file);\n  });\n};\n\nJasmine.prototype.loadHelpers = function () {\n  this.helperFiles.forEach(function (file) {\n    require(file);\n  });\n};\n\nJasmine.prototype.loadConfigFile = function (configFilePath) {\n  try {\n    var absoluteConfigFilePath = path.resolve(this.projectBaseDir, configFilePath || 'spec/support/jasmine.json');\n\n    var config = require(absoluteConfigFilePath);\n\n    this.loadConfig(config);\n  } catch (e) {\n    if (configFilePath || e.code != 'MODULE_NOT_FOUND') {\n      throw e;\n    }\n  }\n};\n\nJasmine.prototype.loadConfig = function (config) {\n  this.specDir = config.spec_dir || this.specDir;\n  this.env.throwOnExpectationFailure(config.stopSpecOnExpectationFailure);\n  this.env.randomizeTests(config.random);\n\n  if (config.helpers) {\n    this.addHelperFiles(config.helpers);\n  }\n\n  if (config.spec_files) {\n    this.addSpecFiles(config.spec_files);\n  }\n};\n\nJasmine.prototype.addHelperFiles = addFiles('helperFiles');\nJasmine.prototype.addSpecFiles = addFiles('specFiles');\n\nfunction addFiles(kind) {\n  return function (files) {\n    var jasmineRunner = this;\n    var fileArr = this[kind];\n    files.forEach(function (file) {\n      if (!(path.isAbsolute && path.isAbsolute(file))) {\n        file = path.join(jasmineRunner.projectBaseDir, jasmineRunner.specDir, file);\n      }\n\n      var filePaths = glob.sync(file);\n      filePaths.forEach(function (filePath) {\n        if (fileArr.indexOf(filePath) === -1) {\n          fileArr.push(filePath);\n        }\n      });\n    });\n  };\n}\n\nJasmine.prototype.onComplete = function (onCompleteCallback) {\n  this.completionReporter.onComplete(onCompleteCallback);\n};\n\nJasmine.prototype.stopSpecOnExpectationFailure = function (value) {\n  this.env.throwOnExpectationFailure(value);\n};\n\nJasmine.prototype.exitCodeCompletion = function (passed) {\n  if (passed) {\n    this.exit(0, process.platform, process.version, process.exit, require('exit'));\n  } else {\n    this.exit(1, process.platform, process.version, process.exit, require('exit'));\n  }\n};\n\nvar checkExit = function (jasmineRunner) {\n  return function () {\n    if (!jasmineRunner.completionReporter.isComplete()) {\n      process.exitCode = 4;\n    }\n  };\n};\n\nJasmine.prototype.execute = function (files, filterString) {\n  process.on('exit', this.checkExit);\n  this.loadHelpers();\n\n  if (!this.defaultReporterConfigured) {\n    this.configureDefaultReporter({\n      showColors: this.showingColors\n    });\n  }\n\n  if (filterString) {\n    var specFilter = new ConsoleSpecFilter({\n      filterString: filterString\n    });\n\n    this.env.specFilter = function (spec) {\n      return specFilter.matches(spec.getFullName());\n    };\n  }\n\n  if (files && files.length > 0) {\n    this.specDir = '';\n    this.specFiles = [];\n    this.addSpecFiles(files);\n  }\n\n  this.loadSpecs();\n  this.addReporter(this.completionReporter);\n  this.env.execute();\n};","map":null,"metadata":{},"sourceType":"script"}