{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet SwitchesComponent = class SwitchesComponent {\n  //inicializamos el servicio FormBuilder\n  constructor(fb) {\n    this.fb = fb; //creamos un objeto de tipo FormGroup\n\n    this.miFormulario = this.fb.group({\n      genero: ['M', Validators.required],\n      notificaciones: [, Validators.required],\n      //requiredTrue, porque si no lo marcaria valido siempre que las condiciones tengan un valor\n      condiciones: [false, Validators.requiredTrue]\n    });\n    this.persona = {\n      genero: 'F',\n      notificaciones: true\n    };\n  } //va a inicializar los valores del formularip para que se correspondan con los de persona\n\n\n  ngOnInit() {\n    //se usa .reset y no .setValue porque los campos del objeto persona no se corresponden\n    //con los de miFormulario, entonces esto manda error, .reset los inicializa y si no\n    //existen los deja como null\n    this.miFormulario.reset(Object.assign(Object.assign({}, this.persona), {\n      condiciones: false\n    })); //se pasa una copia del objeto y se inicializa siempre las condiciones como false\n  }\n\n  guardar() {\n    const formValue = Object.assign({}, this.miFormulario.value);\n  }\n\n};\nSwitchesComponent = __decorate([Component({\n  selector: 'app-switches',\n  templateUrl: './switches.component.html',\n  styles: []\n})], SwitchesComponent);\nexport { SwitchesComponent };","map":null,"metadata":{},"sourceType":"module"}