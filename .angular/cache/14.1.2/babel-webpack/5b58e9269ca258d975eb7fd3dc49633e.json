{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet DinamicosComponent = class DinamicosComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.formularioDinamico = this.fb.group({\n      nombre: ['', [Validators.required, Validators.minLength(3)]],\n      agregar: ['', [Validators.required, Validators.minLength(3)]],\n      favoritos: this.fb.array([['Metal Gear'], ['Death Stranding']], Validators.required)\n    }); //nuevo objeto enlazado con el input que vamos a agregar al arreglo\n\n    this.nuevoFavorito = this.fb.control('', Validators.required);\n  } //[ , [Validators.required] ],\n\n\n  campoNoValido(campo) {\n    return this.formularioDinamico.controls[campo].errors && this.formularioDinamico.controls[campo].touched;\n  }\n\n  guardar() {\n    if (this.formularioDinamico.invalid) {\n      this.formularioDinamico.markAllAsTouched();\n    }\n\n    console.log(this.formularioDinamico.value);\n  } //metodo para convertir el arreglo de FormControl que tenemos ('favoritos')\n  //y convertirlo en un arreglo de FormArray para manipular mas facilmente\n\n\n  get favoritosArr() {\n    return this.formularioDinamico.get('favoritos');\n  }\n\n  agregarFavorito() {\n    if (this.nuevoFavorito.invalid) {\n      return;\n    } //se crea un nuevo objeto porque nuevoFavorito est√° ligado al input y puede ocasionar problemas si se trabaja con el directamente\n\n\n    this.favoritosArr.push(new FormControl(this.nuevoFavorito.value));\n    this.nuevoFavorito.reset();\n  } //recibe el index del elemento y lo borra\n\n\n  borrar(index) {\n    this.favoritosArr.removeAt(index);\n  }\n\n};\nDinamicosComponent = __decorate([Component({\n  selector: 'app-dinamicos',\n  templateUrl: './dinamicos.component.html',\n  styles: []\n})], DinamicosComponent);\nexport { DinamicosComponent };","map":null,"metadata":{},"sourceType":"module"}