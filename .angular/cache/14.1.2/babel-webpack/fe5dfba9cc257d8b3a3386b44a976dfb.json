{"ast":null,"code":"module.exports = exports = ConsoleReporter;\nvar noopTimer = {\n  start: function () {},\n  elapsed: function () {\n    return 0;\n  }\n};\n\nfunction ConsoleReporter() {\n  var print = function () {},\n      showColors = false,\n      timer = noopTimer,\n      jasmineCorePath = null,\n      printDeprecation = function () {},\n      specCount,\n      executableSpecCount,\n      failureCount,\n      failedSpecs = [],\n      pendingSpecs = [],\n      ansi = {\n    green: '\\x1B[32m',\n    red: '\\x1B[31m',\n    yellow: '\\x1B[33m',\n    none: '\\x1B[0m'\n  },\n      failedSuites = [],\n      stackFilter = defaultStackFilter,\n      onComplete = function () {};\n\n  this.setOptions = function (options) {\n    if (options.print) {\n      print = options.print;\n    }\n\n    showColors = options.showColors || false;\n\n    if (options.timer) {\n      timer = options.timer;\n    }\n\n    if (options.jasmineCorePath) {\n      jasmineCorePath = options.jasmineCorePath;\n    }\n\n    if (options.printDeprecation) {\n      printDeprecation = options.printDeprecation;\n    }\n\n    if (options.stackFilter) {\n      stackFilter = options.stackFilter;\n    }\n\n    if (options.onComplete) {\n      printDeprecation('Passing in an onComplete function to the ConsoleReporter is deprecated.');\n      onComplete = options.onComplete;\n    }\n  };\n\n  this.jasmineStarted = function (options) {\n    specCount = 0;\n    executableSpecCount = 0;\n    failureCount = 0;\n\n    if (options && options.order && options.order.random) {\n      print('Randomized with seed ' + options.order.seed);\n      printNewline();\n    }\n\n    print('Started');\n    printNewline();\n    timer.start();\n  };\n\n  this.jasmineDone = function (result) {\n    printNewline();\n    printNewline();\n\n    if (failedSpecs.length > 0) {\n      print('Failures:');\n    }\n\n    for (var i = 0; i < failedSpecs.length; i++) {\n      specFailureDetails(failedSpecs[i], i + 1);\n    }\n\n    if (pendingSpecs.length > 0) {\n      print(\"Pending:\");\n    }\n\n    for (i = 0; i < pendingSpecs.length; i++) {\n      pendingSpecDetails(pendingSpecs[i], i + 1);\n    }\n\n    if (specCount > 0) {\n      printNewline();\n\n      if (executableSpecCount !== specCount) {\n        print('Ran ' + executableSpecCount + ' of ' + specCount + plural(' spec', specCount));\n        printNewline();\n      }\n\n      var specCounts = executableSpecCount + ' ' + plural('spec', executableSpecCount) + ', ' + failureCount + ' ' + plural('failure', failureCount);\n\n      if (pendingSpecs.length) {\n        specCounts += ', ' + pendingSpecs.length + ' pending ' + plural('spec', pendingSpecs.length);\n      }\n\n      print(specCounts);\n    } else {\n      print('No specs found');\n    }\n\n    printNewline();\n    var seconds = timer.elapsed() / 1000;\n    print('Finished in ' + seconds + ' ' + plural('second', seconds));\n    printNewline();\n\n    for (i = 0; i < failedSuites.length; i++) {\n      suiteFailureDetails(failedSuites[i]);\n    }\n\n    if (result && result.failedExpectations) {\n      suiteFailureDetails(result);\n    }\n\n    if (result && result.order && result.order.random) {\n      print('Randomized with seed ' + result.order.seed);\n      printNewline();\n    }\n\n    onComplete(failureCount === 0);\n  };\n\n  this.specDone = function (result) {\n    specCount++;\n\n    if (result.status == 'pending') {\n      pendingSpecs.push(result);\n      executableSpecCount++;\n      print(colored('yellow', '*'));\n      return;\n    }\n\n    if (result.status == 'passed') {\n      executableSpecCount++;\n      print(colored('green', '.'));\n      return;\n    }\n\n    if (result.status == 'failed') {\n      failureCount++;\n      failedSpecs.push(result);\n      executableSpecCount++;\n      print(colored('red', 'F'));\n    }\n  };\n\n  this.suiteDone = function (result) {\n    if (result.failedExpectations && result.failedExpectations.length > 0) {\n      failureCount++;\n      failedSuites.push(result);\n    }\n  };\n\n  return this;\n\n  function printNewline() {\n    print('\\n');\n  }\n\n  function colored(color, str) {\n    return showColors ? ansi[color] + str + ansi.none : str;\n  }\n\n  function plural(str, count) {\n    return count == 1 ? str : str + 's';\n  }\n\n  function repeat(thing, times) {\n    var arr = [];\n\n    for (var i = 0; i < times; i++) {\n      arr.push(thing);\n    }\n\n    return arr;\n  }\n\n  function indent(str, spaces) {\n    var lines = (str || '').split('\\n');\n    var newArr = [];\n\n    for (var i = 0; i < lines.length; i++) {\n      newArr.push(repeat(' ', spaces).join('') + lines[i]);\n    }\n\n    return newArr.join('\\n');\n  }\n\n  function defaultStackFilter(stack) {\n    if (!stack) {\n      return '';\n    }\n\n    var filteredStack = stack.split('\\n').filter(function (stackLine) {\n      return stackLine.indexOf(jasmineCorePath) === -1;\n    }).join('\\n');\n    return filteredStack;\n  }\n\n  function specFailureDetails(result, failedSpecNumber) {\n    printNewline();\n    print(failedSpecNumber + ') ');\n    print(result.fullName);\n\n    for (var i = 0; i < result.failedExpectations.length; i++) {\n      var failedExpectation = result.failedExpectations[i];\n      printNewline();\n      print(indent('Message:', 2));\n      printNewline();\n      print(colored('red', indent(failedExpectation.message, 4)));\n      printNewline();\n      print(indent('Stack:', 2));\n      printNewline();\n      print(indent(stackFilter(failedExpectation.stack), 4));\n    }\n\n    printNewline();\n  }\n\n  function suiteFailureDetails(result) {\n    for (var i = 0; i < result.failedExpectations.length; i++) {\n      printNewline();\n      print(colored('red', 'An error was thrown in an afterAll'));\n      printNewline();\n      print(colored('red', 'AfterAll ' + result.failedExpectations[i].message));\n    }\n\n    printNewline();\n  }\n\n  function pendingSpecDetails(result, pendingSpecNumber) {\n    printNewline();\n    printNewline();\n    print(pendingSpecNumber + ') ');\n    print(result.fullName);\n    printNewline();\n    var pendingReason = \"No reason given\";\n\n    if (result.pendingReason && result.pendingReason !== '') {\n      pendingReason = result.pendingReason;\n    }\n\n    print(indent(colored('yellow', pendingReason), 2));\n    printNewline();\n  }\n}","map":null,"metadata":{},"sourceType":"script"}