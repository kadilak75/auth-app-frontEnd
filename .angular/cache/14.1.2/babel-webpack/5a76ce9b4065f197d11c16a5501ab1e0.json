{"ast":null,"code":"/*\n * exit\n * https://github.com/cowboy/node-exit\n *\n * Copyright (c) 2013 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n */\n'use strict';\n\nmodule.exports = function exit(exitCode, streams) {\n  if (!streams) {\n    streams = [process.stdout, process.stderr];\n  }\n\n  var drainCount = 0; // Actually exit if all streams are drained.\n\n  function tryToExit() {\n    if (drainCount === streams.length) {\n      process.exit(exitCode);\n    }\n  }\n\n  streams.forEach(function (stream) {\n    // Count drained streams now, but monitor non-drained streams.\n    if (stream.bufferSize === 0) {\n      drainCount++;\n    } else {\n      stream.write('', 'utf-8', function () {\n        drainCount++;\n        tryToExit();\n      });\n    } // Prevent further writing.\n\n\n    stream.write = function () {};\n  }); // If all streams were already drained, exit now.\n\n  tryToExit(); // In Windows, when run as a Node.js child process, a script utilizing\n  // this library might just exit with a 0 exit code, regardless. This code,\n  // despite the fact that it looks a bit crazy, appears to fix that.\n\n  process.on('exit', function () {\n    process.exit(exitCode);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}